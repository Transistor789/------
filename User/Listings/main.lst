C51 COMPILER V9.59.0.0   MAIN                                                              12/10/2021 18:28:02 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN ..\Output\main.obj
COMPILER INVOKED BY: F:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver;..\System;..\User) DEBU
                    -G OBJECTEXTEND PRINT(.\Listings\main.lst) OBJECT(..\Output\main.obj)

line level    source

   1          #include "timer.h"      // 定时器
   2          #include "key.h"        // 按键
   3          #include "seg.h"        // 数码管
   4          #include "ds1302.h"     // DS1032时钟芯片
   5          #include "i2c.h"        // AT24C02外部存储芯片
   6          #include "onewire.h"// DS18B20温度传感器
   7          #include "delay.h"      // 软件延时
   8          
   9          sbit beep = P1 ^ 5; // 蜂鸣器引脚定义
  10          uint ms = 0; // 毫秒变量
  11          // 数码管字符串数组、段码数组、显示位置
  12          uchar seg_string[10], seg_code[9], pos = 0;
  13          // 时间数组、闹钟数组、缓存数组
  14          uchar rtc[3] = { 23, 59, 55 }, alarm[3] = { 22,0,0 }
  15          , temp[3] = { 0,0,0 };
  16          bit alarm_state = 0, alarm_enable = 0; // 闹钟标志位
  17          uint temperature = 0; // 温度
  18          uchar mode = 0; // 模式
  19          
  20          void eeprom_init();     // eeprom初始化
  21          void alarm_proc();      // 闹钟处理
  22          void seg_proc();        // 数码管处理
  23          void key_proc();        // 按键处理
  24          
  25          void main()
  26          {
  27   1              eeprom_init();  // eeprom初始化
  28   1              timer_init();   // 定时器初始化
  29   1              set_rtc(rtc);   // 设置时间
  30   1      
  31   1              while (1)
  32   1              {
  33   2                      seg_proc();             // 数码管处理
  34   2                      key_proc();             // 按键处理
  35   2                      alarm_proc();   // 闹钟处理
  36   2              }
  37   1      }
  38          void timer() interrupt 1
  39          {
  40   1              TH0 = (65536 - 922) / 256; // 重装初值
  41   1              TL0 = (65536 - 922) % 256;
  42   1              if (++ms == 1000)       ms = 0; // ms变量以1000为周期
  43   1              if (alarm_enable && alarm_state) // 蜂鸣器工作条件
  44   1                      beep = ~beep; // 2ms周期即输出500Hz方波
  45   1              display(seg_code, pos); // 数码管显示
  46   1              if (++pos == 8) pos = 0;// 周期8ms即刷新率为125Hz 
  47   1      }
  48          void eeprom_init()
  49          {
  50   1              uchar flag, i;
  51   1              flag = At24c02Read(0x06);
  52   1      
  53   1              if (flag == 0x66) {
  54   2                      for (i = 0;i < 3;i++) {
C51 COMPILER V9.59.0.0   MAIN                                                              12/10/2021 18:28:02 PAGE 2   

  55   3                              rtc[i] = At24c02Read(i);
  56   3                              delay(1);
  57   3                              alarm[i] = At24c02Read(i + 3);
  58   3                              delay(1);
  59   3                      }
  60   2              }
  61   1              else {
  62   2                      for (i = 0;i < 3;i++) {
  63   3                              At24c02Write(i, rtc[i]);
  64   3                              delay(1);
  65   3                              At24c02Write(i + 3, alarm[i]);
  66   3                              delay(1);
  67   3                      }
  68   2                      At24c02Write(6, 0x66);
  69   2              }
  70   1      }
  71          void alarm_proc()
  72          {
  73   1              uchar i;
  74   1              if (ms) return;
  75   1      
  76   1              if (rtc[0] == alarm[0] && rtc[1] == alarm[1] && rtc[2] == alarm[2])
  77   1                      alarm_state = 1, alarm_enable = 1; // 开启闹钟状态和使能标志位
  78   1              else if (alarm_enable == 1 && rtc[0] == temp[0] && rtc[1] == temp[1] && rtc[2] == temp[2])
  79   1                      alarm_state = 1;// 再次开启闹钟状态标志位
  80   1      
  81   1              if (alarm_state && alarm_enable && rtc[2] == 30) {
  82   2                      alarm_state = 0; // 30秒自动关闭
  83   2                      temp[1] += 2;
  84   2              }
  85   1              else if (!alarm_state && !alarm_enable) {
  86   2                      for (i = 0;i < 3;i++)
  87   2                              temp[i] = alarm[i];
  88   2              }
  89   1              if (temp[1] > 59) {
  90   2                      temp[1] -= 60;
  91   2                      if (++temp[0] == 24) temp[0] = 0;
  92   2              }
  93   1      }
  94          void key_proc()
  95          {
  96   1              static uchar key_val, key_down, key_old;
  97   1              uchar i;
  98   1              if (ms % 10)    return; // 10ms周期
  99   1      
 100   1              // 按键消抖
 101   1              key_val = key_scan();
 102   1              key_down = key_val & (key_val ^ key_old);
 103   1              key_old = key_val;
 104   1      
 105   1              switch (key_down)
 106   1              {
 107   2              case 1:
 108   2                      if (mode == 0x20)
 109   2                              mode = 0;
 110   2                      else if (mode & 0x0f) {
 111   3                              mode &= 0xf0;
 112   3                              for (i = 0;i < 3;i++) {
 113   4                                      At24c02Write(i, rtc[i]);
 114   4                                      delay(1);
 115   4                                      At24c02Write(i + 3, alarm[i]);
 116   4                                      delay(1);
C51 COMPILER V9.59.0.0   MAIN                                                              12/10/2021 18:28:02 PAGE 3   

 117   4                              }
 118   3                      }
 119   2                      else
 120   2                              mode = (mode + 0x10) & 0xf0;
 121   2                      P2 = ~((mode & 0xf0) << 2);
 122   2                      break;
 123   2              case 2:
 124   2                      mode++;
 125   2                      if ((mode < 0x10 && (mode & 0x0f) == 4)
 126   2                              || (mode >= 0x10 && mode < 0x20 && (mode & 0x0f) == 3))
 127   2                              mode &= 0xf0;
 128   2                      break;
 129   2              case 3:
 130   2                      if ((mode & 0x0f) != 0) {
 131   3                              if (mode < 0x10) {
 132   4                                      switch (mode)
 133   4                                      {
 134   5                                      case 0x01:
 135   5                                              if (++rtc[0] > 23)      rtc[0] = 0;break;
 136   5                                      case 0x02:
 137   5                                              if (++rtc[1] > 59)      rtc[1] = 0;break;
 138   5                                      case 0x03:
 139   5                                              if (++rtc[1] == 60)     rtc[1] = 0;
 140   5                                              rtc[2] = 0;break;
 141   5                                      }
 142   4                                      set_rtc(rtc);
 143   4                              }
 144   3                              else {
 145   4                                      switch (mode)
 146   4                                      {
 147   5                                      case 0x11:
 148   5                                              if (++alarm[0] > 23)    alarm[0] = 0;break;
 149   5                                      case 0x12:
 150   5                                              if (++alarm[1] > 59)    alarm[1] = 0;break;
 151   5                                      }
 152   4                              }
 153   3                      }
 154   2                      if (alarm_state)
 155   2                              alarm_state = 0, temp[1] += 2;
 156   2                      break;
 157   2              case 4:
 158   2                      if ((mode & 0x0f) != 0) {
 159   3                              if (mode < 0x10) {
 160   4                                      switch (mode)
 161   4                                      {
 162   5                                      case 0x01:
 163   5                                              if (--rtc[0] > 23)      rtc[0] = 23;break;
 164   5                                      case 0x02:
 165   5                                              if (--rtc[1] > 59)      rtc[1] = 59;break;
 166   5                                      case 0x03:
 167   5                                              rtc[2] = 0;break;
 168   5                                      }
 169   4                                      set_rtc(rtc);
 170   4                              }
 171   3                              else {
 172   4                                      switch (mode)
 173   4                                      {
 174   5                                      case 0x11:
 175   5                                              if (--alarm[0] > 23)    alarm[0] = 23;break;
 176   5                                      case 0x12:
 177   5                                              if (--alarm[1] > 59)    alarm[1] = 59;break;
 178   5                                      }
C51 COMPILER V9.59.0.0   MAIN                                                              12/10/2021 18:28:02 PAGE 4   

 179   4                              }
 180   3                      }
 181   2                      if (alarm_state || alarm_enable)
 182   2                              alarm_enable = 0;
 183   2                      break;
 184   2              default:
 185   2                      break;
 186   2              }
 187   1      }
 188          void seg_proc()
 189          {
 190   1              if (ms % 500)   return;
 191   1      
 192   1              rd_rtc(rtc);
 193   1              if (mode >= 0 && mode < 0x10) {
 194   2                      seg_string[0] = 48 + rtc[0] / 10;
 195   2                      seg_string[1] = 48 + rtc[0] % 10;
 196   2                      seg_string[2] = '-';
 197   2                      seg_string[3] = 48 + rtc[1] / 10;
 198   2                      seg_string[4] = 48 + rtc[1] % 10;
 199   2                      seg_string[5] = '-';
 200   2                      seg_string[6] = 48 + rtc[2] / 10;
 201   2                      seg_string[7] = 48 + rtc[2] % 10;
 202   2              }
 203   1              else if (mode < 0x20) {
 204   2                      seg_string[0] = 48 + alarm[0] / 10;
 205   2                      seg_string[1] = 48 + alarm[0] % 10;
 206   2                      seg_string[2] = '-';
 207   2                      seg_string[3] = 48 + alarm[1] / 10;
 208   2                      seg_string[4] = 48 + alarm[1] % 10;
 209   2                      seg_string[5] = '-';
 210   2                      seg_string[6] = 48 + alarm[2] / 10;
 211   2                      seg_string[7] = 48 + alarm[2] % 10;
 212   2              }
 213   1              else {
 214   2                      EA = 0;
 215   2                      temperature = rd_temperature();
 216   2                      EA = 1;
 217   2                      seg_string[0] = 'C';
 218   2                      seg_string[1] = ' ';
 219   2                      seg_string[2] = ' ';
 220   2                      seg_string[3] = ' ';
 221   2                      seg_string[4] = ' ';
 222   2                      seg_string[5] = 48 + (temperature >> 4) / 10;
 223   2                      seg_string[6] = 48 + (temperature >> 4) % 10;
 224   2                      seg_string[7] = '.';
 225   2                      seg_string[8] = 48 + (temperature / 16.0 - (temperature >> 4)) * 10;
 226   2              }
 227   1              // 设置模式闪烁
 228   1              if (mode < 0x20 && (mode & 0x0f) != 0 && ms < 500) {
 229   2                      seg_string[((mode & 0x0f) - 1) * 3] = ' ';
 230   2                      seg_string[((mode & 0x0f) - 1) * 3 + 1] = ' ';
 231   2              }
 232   1              convert(seg_string, seg_code);
 233   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1337    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.59.0.0   MAIN                                                              12/10/2021 18:28:02 PAGE 5   

   DATA SIZE        =     37       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
